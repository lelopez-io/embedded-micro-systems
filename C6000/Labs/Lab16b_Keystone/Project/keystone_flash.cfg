var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Agent = xdc.useModule('ti.sysbios.rta.Agent');


//var Hwi = xdc.useModule('ti.sysbios.family.c64p.Hwi');
//Hwi.resetVectorAddress = 0x11830000;




/* 
 * Program.argSize sets the size of the .args section. 
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x1000;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x2000;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x200;

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "HWI_INT5";
hwi0Params.eventId = 61;
hwi0Params.priority = 5;
Program.global.HWI_INT5 = Hwi.create(5, "&isrAudio", hwi0Params);
var task0Params = new Task.Params();
task0Params.instance.name = "firProcessTask";
task0Params.priority = 2;
Program.global.firProcessTask = Task.create("&FIR_process", task0Params);
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "mcaspReady";
Program.global.mcaspReady = Semaphore.create(null, semaphore0Params);
var clock0Params = new Clock.Params();
clock0Params.instance.name = "ledToggleClock";
clock0Params.period = 250;
clock0Params.startFlag = true;
Program.global.ledToggleClock = Clock.create("&ledTogglePost", 250, clock0Params);
Agent.sysbiosLoggerSize = 32768;
Agent.sysbiosSwiLogging = true;
Agent.transport = Agent.Transport_STOP_MODE_ONLY;
var task1Params = new Task.Params();
task1Params.instance.name = "ledToggleTask";
Program.global.ledToggleTask = Task.create("&ledToggle", task1Params);
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "ledToggleSem";
Program.global.ledToggleSem = Semaphore.create(null, semaphore1Params);
